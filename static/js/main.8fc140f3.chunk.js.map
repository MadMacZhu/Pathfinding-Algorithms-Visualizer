{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","algorithms/dijkstra.js","algorithms/apath.js","algorithms/bfs.js","PathfindingVisualizer/PathfindingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","apath","fScore","manhattanDistance","sortNodesByfScore","currentNode","Math","abs","PathfindingVisualizer","state","mouseIsPressed","getInitialGrid","setState","newGrid","getNewGridWithWallToggled","nodesInShortestPathOrder","i","setTimeout","animateShortestPath","document","getElementById","unshift","getNodesInShortestPathOrder","animateSearch","agetNodesInShortestPathOrder","nodesInQueue","bfs","bgetNodesInShortestPathOrder","type","onClick","visualizeDijkstra","visualizeAPath","visualizeBfs","window","location","reload","gridhandleMouseDown","handleMouseUp","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","currentRow","createNode","slice","newNode","App","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8fc140f3.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      isWall,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      row,\r\n    } = this.props;\r\n    const extraClassName = isFinish\r\n      ? 'node-finish'\r\n      : isStart\r\n      ? 'node-start'\r\n      : isWall\r\n      ? 'node-wall'\r\n      : '';\r\n\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}></div>\r\n    );\r\n  }\r\n}\r\n","// Performs Dijkstra's algorithm; returns *all* nodes in the order\r\n// in which they were visited. Also makes nodes point back to their\r\n// previous node, effectively allowing us to compute the shortest path\r\n// by backtracking from the finish node.\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n  while (!!unvisitedNodes.length) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n    // If we encounter a wall, we skip it.\r\n    if (closestNode.isWall) continue;\r\n    // If the closest node is at a distance of infinity,\r\n    // we must be trapped and should therefore stop.\r\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    updateUnvisitedNeighbors(closestNode, grid);\r\n  }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const {col, row} = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called *after* the dijkstra method above.\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","// 实现了A*路径搜索算法，主函数会返回一个由节点（Node）组成的序列,\r\n// 其顺序记录了搜索进行过程中访问节点的顺序，在主应用（PathfindingVisulizer）\r\n// 会被调用，借以绘制出搜索过程和最短路径。\r\n\r\nexport function apath(grid, startNode, finishNode) {\r\n    const visitedNodesInOrder = [];\r\n    startNode.distance = 0;\r\n    startNode.fScore = manhattanDistance(startNode, finishNode);\r\n    const unvisitedNodes = getAllNodes(grid);\r\n    while (!!unvisitedNodes.length) {\r\n      sortNodesByfScore(unvisitedNodes);\r\n      const closestNode = unvisitedNodes.shift();\r\n      // If we encounter a wall, we skip it.\r\n      if (closestNode.isWall) continue;\r\n      // If the closest node is at a distance of infinity,\r\n      // we must be trapped and should therefore stop.\r\n      if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n      closestNode.isVisited = true;\r\n      visitedNodesInOrder.push(closestNode);\r\n      if (closestNode === finishNode) return visitedNodesInOrder;\r\n      updateUnvisitedNeighbors(closestNode, grid, finishNode);\r\n    }\r\n  }\r\n\r\n  function manhattanDistance(currentNode, finishNode) {\r\n      return Math.abs(currentNode.row - finishNode.row) + Math.abs(currentNode.col - finishNode.col);\r\n  }\r\n  \r\n  function sortNodesByfScore(unvisitedNodes) {\r\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.fScore - nodeB.fScore);\r\n  }\r\n  \r\n  function updateUnvisitedNeighbors(node, grid, finishNode) {\r\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n    for (const neighbor of unvisitedNeighbors) {\r\n      neighbor.distance = node.distance + 1;\r\n      neighbor.fScore = neighbor.distance + manhattanDistance(neighbor, finishNode);\r\n      neighbor.previousNode = node;\r\n    }\r\n  }\r\n  \r\n  function getUnvisitedNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const {col, row} = node;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    return neighbors.filter(neighbor => !neighbor.isVisited);\r\n  }\r\n  \r\n  function getAllNodes(grid) {\r\n    const nodes = [];\r\n    for (const row of grid) {\r\n      for (const node of row) {\r\n        nodes.push(node);\r\n      }\r\n    }\r\n    return nodes;\r\n  }\r\n  \r\n  // Backtracks from the finishNode to find the shortest path.\r\n  // Only works when called *after* the dijkstra method above.\r\n  export function agetNodesInShortestPathOrder(finishNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n      nodesInShortestPathOrder.unshift(currentNode);\r\n      currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPathOrder;\r\n  }\r\n  ","// 实现了广度优先路径搜索算法，主函数本质上使用了队列这个数据结构\r\n// 此外主函数会返回一个由节点（Node）组成的序列,\r\n// 其顺序记录了搜索进行过程中访问节点的顺序，在主应用（PathfindingVisulizer）\r\n// 会被调用，借以绘制出搜索过程和最短路径。\r\n\r\nexport function bfs(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  const nodesInQueue = [];\r\n  visitedNodesInOrder.push(startNode);\r\n  nodesInQueue.push(startNode);\r\n  startNode.isVisited = true;\r\n  while (!!nodesInQueue.length) {\r\n    const closestNode = nodesInQueue.shift();\r\n    const unvisitedNeighbors = getUnvisitedNeighbors(closestNode, grid);\r\n    for (const neighbor of unvisitedNeighbors) {\r\n      neighbor.previousNode = closestNode;\r\n      if (neighbor === finishNode) return visitedNodesInOrder;\r\n      neighbor.isVisited = true;\r\n      nodesInQueue.push(neighbor);\r\n      visitedNodesInOrder.push(neighbor);      \r\n    }\r\n  }\r\n  return visitedNodesInOrder;\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const {col, row} = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter(neighbor => (!neighbor.isVisited && !neighbor.isWall));\r\n}\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called *after* the dijkstra method above.\r\nexport function bgetNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","// 此应用中主要的数据结构节点（Node）是作为一个JSON对象存在的，\r\n// 根据算法需要此对象具有多个属性，在动画实现过程中这些属性利用了\r\n// React架构传递给了前端的HTML与CSS\r\n\r\nimport React, {Component} from 'react';\r\nimport Node from './Node/Node';\r\nimport {dijkstra, getNodesInShortestPathOrder} from '../algorithms/dijkstra';\r\nimport {apath, agetNodesInShortestPathOrder} from '../algorithms/apath';\r\nimport {bfs, bgetNodesInShortestPathOrder} from '../algorithms/bfs';\r\n\r\n\r\nimport './PathfindingVisualizer.css';\r\n\r\nconst START_NODE_ROW = 7;\r\nconst START_NODE_COL = 10;\r\nconst FINISH_NODE_ROW = 10;\r\nconst FINISH_NODE_COL = 32;\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = getInitialGrid();\r\n    this.setState({grid});\r\n  }\r\n\r\n  handleMouseDown(row, col) {\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({grid: newGrid, mouseIsPressed: true});\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.mouseIsPressed) return;\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({grid: newGrid});\r\n  }\r\n\r\n  gridhandleMouseDown() {\r\n    this.setState({mouseIsPressed: true});\r\n  }\r\n\r\n  handleMouseUp() {\r\n    this.setState({mouseIsPressed: false});\r\n  }\r\n\r\n  animateSearch(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 1; i < visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length-1) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 25 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-visited';\r\n      }, 25 * i);\r\n    }\r\n  }\r\n\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 1; i < nodesInShortestPathOrder.length-1; i++) {\r\n      if (i< nodesInShortestPathOrder.length - 1){\r\n        setTimeout(() => {\r\n          const node = nodesInShortestPathOrder[i];\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            'node node-shortest-path';\r\n        }, 25 * i);\r\n     }\r\n     if (i === nodesInShortestPathOrder.length - 1) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-shortest-path';\r\n      }, 25 * i);\r\n\r\n     }\r\n    }\r\n  }\r\n\r\n  visualizeDijkstra() {\r\n    const {grid} = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animateSearch(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    document.getElementById(`node-${finishNode.row}-${finishNode.col}`).className =\r\n    'node node-finish';\r\n  }\r\n\r\n  visualizeAPath() {\r\n    const {grid} = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    const visitedNodesInOrder = apath(grid, startNode, finishNode);\r\n    const nodesInShortestPathOrder = agetNodesInShortestPathOrder(finishNode);\r\n    this.animateSearch(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    document.getElementById(`node-${finishNode.row}-${finishNode.col}`).className =\r\n    'node node-finish';\r\n  }\r\n\r\n  visualizeBfs() {\r\n    const {grid} = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    const visitedNodesInOrder = bfs(grid, startNode, finishNode);\r\n    const nodesInShortestPathOrder = bgetNodesInShortestPathOrder(finishNode);\r\n    this.animateSearch(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    document.getElementById(`node-${finishNode.row}-${finishNode.col}`).className =\r\n    'node node-finish';\r\n  }\r\n\r\n  render() {\r\n    const {grid, mouseIsPressed} = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div className=\"legend\">\r\n          <p>Legend:</p>\r\n          <div className=\"node-example1\"></div>\r\n          <p>Starting Node</p>\r\n          <div className=\"node-example2\"></div>\r\n          <p>End Node</p>\r\n          <div className=\"node-example3\"></div>\r\n          <p>Wall Node(Left-click to toggle)</p>\r\n        </div>\r\n        <div className=\"button-container\">\r\n          <p className=\"button-title\">Visualize the Algorithms:</p>\r\n          <button type=\"button\" className=\"btn btn-primary btn-lg\" onClick={() => this.visualizeDijkstra()}>\r\n            Visualize Dijkstra's Algorithm\r\n          </button>\r\n          <button type=\"button\" className=\"btn btn-primary btn-lg\" onClick={() => this.visualizeAPath()}>\r\n            Visualize A*Path Algorithm\r\n          </button>\r\n          <button type=\"button\" className=\"btn btn-primary btn-lg\" onClick={() => this.visualizeBfs()}>\r\n            Visualize Breadth First Search Algorithm\r\n          </button>\r\n          <button type=\"button\" className=\"btn btn-secondary btn-lg\" onClick={() => window.location.reload()}>\r\n            Refresh\r\n          </button>\r\n        </div>\r\n        <div onMouseDown = {() => this.gridhandleMouseDown()} onMouseUp={() => this.handleMouseUp()} className=\"grid-container\">\r\n          <div className=\"grid\">\r\n            {grid.map((row, rowIdx) => {\r\n              return (\r\n                <div key={rowIdx}>\r\n                  {row.map((node, nodeIdx) => {\r\n                    const {row, col, isFinish, isStart, isWall} = node;\r\n                    return (\r\n                      <Node\r\n                        key={nodeIdx}\r\n                        col={col}\r\n                        isFinish={isFinish}\r\n                        isStart={isStart}\r\n                        isWall={isWall}\r\n                        mouseIsPressed={mouseIsPressed}\r\n                        onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                        onMouseEnter={(row, col) => this.handleMouseEnter(row, col)}\r\n                        onMouseUp={() => this.handleMouseUp()}\r\n                        row={row}></Node>\r\n                    );\r\n                  })}\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst getInitialGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < 16; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < 40; col++) {\r\n      currentRow.push(createNode(col, row));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n    distance: Infinity,\r\n    fScore: Infinity,\r\n    isVisited: false,\r\n    isWall: false,\r\n    previousNode: null,\r\n  };\r\n};\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: !node.isWall,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n","import React from 'react';\r\nimport './App.css';\r\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <PathfindingVisualizer></PathfindingVisualizer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}